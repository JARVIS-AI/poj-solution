#include<iostream>
using namespace std;
const int large = 500000; 
class TrieTree_Node   
{
public:
	bool flag;  
	int id;     
	TrieTree_Node* next[27];
	TrieTree_Node() 
	{
		flag = false;
		id = 0;
		memset(next, 0, sizeof(next)); 
	}
}*root;
int color = 0;  
int degree[500001]; 
int ancestor[500001];  
int find(int x)
{
	if (ancestor[x] != x)
		ancestor[x] = find(ancestor[x]); 
	return ancestor[x];
}
void union_set(int a, int b)
{
	int pa = find(a);
	int pb = find(b);
	ancestor[pb] = pa; 
}
int keytree(char *s)
{
	TrieTree_Node* p =root; 
	int len = 0;
	while (s[len] != '\0')
	{
		int index = s[len++] - 'a';  

		if (!p->next[index]) 
			p->next[index] = new TrieTree_Node;
		p = p->next[index];
	}
	if (p->flag)  
		return p->id;  
	else   
	{
		p->flag = true;
		p->id = color++;
		return p->id;   
	}
}
int main(void)
{
	root = new TrieTree_Node;
	for (int k = 0; k <large; k++)   
		ancestor[k] = k;  
	char a[11], b[11];
	while (cin >> a >> b)
	{
		int i = keytree(a);
		int j = keytree(b);
		degree[i]++;
		degree[j]++;  
		union_set(i, j);
	}
	int s = find(0);  
	int num = 0;  
	for (int i = 0; i <color; i++)
	{
		if (degree[i] % 2 == 1)
			num++;

		if (num>2)   
		{
			cout << "Impossible" << endl;
			return 0;
		}

		if (find(i) != s)   
		{
			cout << "Impossible" << endl;
			return 0;
		}
	}
	if (num == 1) 
		cout << "Impossible" << endl;
	else       
		cout << "Possible" << endl;
	return 0;
}