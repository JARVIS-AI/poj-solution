/////*
//// @poj 1543
//// 提前处理，然后直接查找表
//// a^3=b^3+c^3+d^3
////*/
////#include<fstream>
////#include<iostream>
////#include<cmath>
////#include<algorithm>
////using namespace std;
////int N;
////ofstream w;
////struct info{
////	int a, b, c, d;
////	info(){};
////	info(int aa, int bb, int cc, int dd){
////		a = aa;
////		b = bb;
////		c = cc;
////		d = dd;
////	}
////};
////int num = 0;
//////一个判断一个数字数不是cube的函数实现
////void cube(int x)
////{
////	w.open("d.txt",ios::app);
////	info ans;
////	int l = pow(x, 3);
////	int idex = 0;
////	for (int i = 2; i <=x; i++){
////		for (int j = 2; j <=x; j++){
////			for (int k = 2; k <= x; k++){
////				if (l==((pow(i, 3))+pow(j, 3)+pow(k, 3))){
////					//判断是不是需要拿进去repet数组里面
////					w << "pd(" <<x<< "," <<i<< "," <<j<< "," <<k<< "),";
////					num++;
////					if (num % 10 == 0){
////						w << endl;
////					}
////				}
////			}
////		}
////	}
////	w.close();
////}
////
////int main()
////{
////	for (int i =2; i<=100; i++){
////		//判断每一个x是不是属于cube数
////		cube(i);
////	}
////	w.open("d.txt", ios::app);
////	w << "num=" << num << endl;
////	w.close();
////	return 0;
////}
//
////开始查询
//#include<iostream>
//#include<algorithm>
//using namespace std;
//struct pd{ 
//	int a, b, c,d;
//	pd(int aa,int bb,int cc,int dd){
//		a = aa;
//		b = bb;
//		c = cc;
//		d = dd;
//	}
//	pd(){ };
//};
//int*  mysort(int b,int c,int d){
//	int a[3] = {b,c,d};
//	sort(a, a + 3);
//	return a;
//}
//int main()
//{
//	pd hash[486] = {
//		pd(6, 3, 4, 5), pd(12, 6, 8, 10), pd(18, 2, 12, 16), pd(18, 9, 12, 15),
//        pd(19, 3, 10, 18),pd(20, 7, 14, 17),
//		pd(24, 12, 16, 20),  pd(25, 4, 17, 22), pd(27, 3, 18, 24), pd(28, 18, 19, 21),
//		pd(29, 11, 15, 27),pd(30, 15, 20, 25),  pd(36, 4, 24, 32), pd(36, 18, 24, 30), pd(38, 6, 20, 36), pd(38, 6, 36, 20),
//		pd(38, 20, 6, 36), pd(38, 20, 36, 6), pd(38, 36, 6, 20), pd(38, 36, 20, 6),
//		pd(40, 14, 28, 34), pd(40, 14, 34, 28), pd(40, 28, 14, 34), pd(40, 28, 34, 14), pd(40, 34, 14, 28), pd(40, 34, 28, 14),
//		pd(41, 2, 17, 40), pd(41, 2, 40, 17), pd(41, 6, 32, 33), pd(41, 6, 33, 32),
//		pd(41, 17, 2, 40), pd(41, 17, 40, 2), pd(41, 32, 6, 33), pd(41, 32, 33, 6), pd(41, 33, 6, 32), pd(41, 33, 32, 6), 
//		pd(41, 40, 2, 17), pd(41, 40, 17, 2), pd(42, 21, 28, 35), pd(42, 21, 35, 28),
//		pd(42, 28, 21, 35), pd(42, 28, 35, 21), pd(42, 35, 21, 28), pd(42, 35, 28, 21), pd(44, 16, 23, 41), pd(44, 16, 41, 23),
//		pd(44, 23, 16, 41), pd(44, 23, 41, 16), pd(44, 41, 16, 23), pd(44, 41, 23, 16),
//		pd(45, 5, 30, 40), pd(45, 5, 40, 30), pd(45, 30, 5, 40), pd(45, 30, 40, 5), pd(45, 40, 5, 30), pd(45, 40, 30, 5),
//		pd(46, 3, 36, 37), pd(46, 3, 37, 36), pd(46, 27, 30, 37), pd(46, 27, 37, 30),
//		pd(46, 30, 27, 37), pd(46, 30, 37, 27), pd(46, 36, 3, 37), pd(46, 36, 37, 3), pd(46, 37, 3, 36), pd(46, 37, 27, 30), 
//		pd(46, 37, 30, 27), pd(46, 37, 36, 3), pd(48, 24, 32, 40), pd(48, 24, 40, 32),
//		pd(48, 32, 24, 40), pd(48, 32, 40, 24), pd(48, 40, 24, 32), pd(48, 40, 32, 24), pd(50, 8, 34, 44), pd(50, 8, 44, 34),
//		pd(50, 34, 8, 44), pd(50, 34, 44, 8), pd(50, 44, 8, 34), pd(50, 44, 34, 8),
//		pd(53, 29, 34, 44), pd(53, 29, 44, 34), pd(53, 34, 29, 44), pd(53, 34, 44, 29), pd(53, 44, 29, 34), pd(53, 44, 34, 29),
//		pd(54, 6, 36, 48), pd(54, 6, 48, 36), pd(54, 12, 19, 53), pd(54, 12, 53, 19),
//		pd(54, 19, 12, 53), pd(54, 19, 53, 12), pd(54, 27, 36, 45), pd(54, 27, 45, 36), pd(54, 36, 6, 48), pd(54, 36, 27, 45),
//		pd(54, 36, 45, 27), pd(54, 36, 48, 6), pd(54, 45, 27, 36), pd(54, 45, 36, 27),
//		pd(54, 48, 6, 36), pd(54, 48, 36, 6), pd(54, 53, 12, 19), pd(54, 53, 19, 12), pd(56, 36, 38, 42), pd(56, 36, 42, 38),
//		pd(56, 38, 36, 42), pd(56, 38, 42, 36), pd(56, 42, 36, 38), pd(56, 42, 38, 36),
//		pd(57, 9, 30, 54), pd(57, 9, 54, 30), pd(57, 30, 9, 54), pd(57, 30, 54, 9), pd(57, 54, 9, 30), pd(57, 54, 30, 9),
//		pd(58, 15, 42, 49), pd(58, 15, 49, 42), pd(58, 22, 30, 54), pd(58, 22, 54, 30),
//		pd(58, 30, 22, 54), pd(58, 30, 54, 22), pd(58, 42, 15, 49), pd(58, 42, 49, 15), pd(58, 49, 15, 42), pd(58, 49, 42, 15),
//		pd(58, 54, 22, 30), pd(58, 54, 30, 22), pd(60, 21, 42, 51), pd(60, 21, 51, 42),
//		pd(60, 30, 40, 50), pd(60, 30, 50, 40), pd(60, 40, 30, 50), pd(60, 40, 50, 30), pd(60, 42, 21, 51), pd(60, 42, 51, 21),
//		pd(60, 50, 30, 40), pd(60, 50, 40, 30), pd(60, 51, 21, 42), pd(60, 51, 42, 21),
//		pd(63, 7, 42, 56), pd(63, 7, 56, 42), pd(63, 42, 7, 56), pd(63, 42, 56, 7), pd(63, 56, 7, 42), pd(63, 56, 42, 7),
//		pd(66, 33, 44, 55), pd(66, 33, 55, 44), pd(66, 44, 33, 55), pd(66, 44, 55, 33),
//		pd(66, 55, 33, 44), pd(66, 55, 44, 33), pd(67, 22, 51, 54), pd(67, 22, 54, 51), pd(67, 51, 22, 54), pd(67, 51, 54, 22),
//		pd(67, 54, 22, 51), pd(67, 54, 51, 22), pd(69, 36, 38, 61), pd(69, 36, 61, 38),
//		pd(69, 38, 36, 61), pd(69, 38, 61, 36), pd(69, 61, 36, 38), pd(69, 61, 38, 36), pd(70, 7, 54, 57), pd(70, 7, 57, 54),
//		pd(70, 54, 7, 57), pd(70, 54, 57, 7), pd(70, 57, 7, 54), pd(70, 57, 54, 7),
//		pd(71, 14, 23, 70), pd(71, 14, 70, 23), pd(71, 23, 14, 70), pd(71, 23, 70, 14), pd(71, 70, 14, 23), pd(71, 70, 23, 14),
//		pd(72, 8, 48, 64), pd(72, 8, 64, 48), pd(72, 34, 39, 65), pd(72, 34, 65, 39),
//		pd(72, 36, 48, 60), pd(72, 36, 60, 48), pd(72, 39, 34, 65), pd(72, 39, 65, 34), pd(72, 48, 8, 64), pd(72, 48, 36, 60),
//		pd(72, 48, 60, 36), pd(72, 48, 64, 8), pd(72, 60, 36, 48), pd(72, 60, 48, 36),
//		pd(72, 64, 8, 48), pd(72, 64, 48, 8), pd(72, 65, 34, 39), pd(72, 65, 39, 34), pd(75, 12, 51, 66), pd(75, 12, 66, 51),
//		pd(75, 38, 43, 66), pd(75, 38, 66, 43), pd(75, 43, 38, 66), pd(75, 43, 66, 38),
//		pd(75, 51, 12, 66), pd(75, 51, 66, 12), pd(75, 66, 12, 51), pd(75, 66, 38, 43), pd(75, 66, 43, 38), pd(75, 66, 51, 12),
//		pd(76, 12, 40, 72), pd(76, 12, 72, 40), pd(76, 31, 33, 72), pd(76, 31, 72, 33),
//		pd(76, 33, 31, 72), pd(76, 33, 72, 31), pd(76, 40, 12, 72), pd(76, 40, 72, 12), pd(76, 72, 12, 40), pd(76, 72, 31, 33),
//		pd(76, 72, 33, 31), pd(76, 72, 40, 12), pd(78, 39, 52, 65), pd(78, 39, 65, 52),
//		pd(78, 52, 39, 65), pd(78, 52, 65, 39), pd(78, 65, 39, 52), pd(78, 65, 52, 39), pd(80, 28, 56, 68), pd(80, 28, 68, 56),
//		pd(80, 56, 28, 68), pd(80, 56, 68, 28), pd(80, 68, 28, 56), pd(80, 68, 56, 28),
//		pd(81, 9, 54, 72), pd(81, 9, 72, 54), pd(81, 25, 48, 74), pd(81, 25, 74, 48), pd(81, 48, 25, 74), pd(81, 48, 74, 25), pd(81, 54, 9, 72), pd(81, 54, 72, 9), pd(81, 72, 9, 54), pd(81, 72, 54, 9),
//		pd(81, 74, 25, 48), pd(81, 74, 48, 25), pd(82, 4, 34, 80), pd(82, 4, 80, 34), pd(82, 12, 64, 66), pd(82, 12, 66, 64), pd(82, 19, 60, 69), pd(82, 19, 69, 60), pd(82, 34, 4, 80), pd(82, 34, 80, 4),
//		pd(82, 60, 19, 69), pd(82, 60, 69, 19), pd(82, 64, 12, 66), pd(82, 64, 66, 12), pd(82, 66, 12, 64), pd(82, 66, 64, 12), pd(82, 69, 19, 60), pd(82, 69, 60, 19), pd(82, 80, 4, 34), pd(82, 80, 34, 4),
//		pd(84, 28, 53, 75), pd(84, 28, 75, 53), pd(84, 42, 56, 70), pd(84, 42, 70, 56), pd(84, 53, 28, 75), pd(84, 53, 75, 28), pd(84, 54, 57, 63), pd(84, 54, 63, 57), pd(84, 56, 42, 70), pd(84, 56, 70, 42),
//		pd(84, 57, 54, 63), pd(84, 57, 63, 54), pd(84, 63, 54, 57), pd(84, 63, 57, 54), pd(84, 70, 42, 56), pd(84, 70, 56, 42), pd(84, 75, 28, 53), pd(84, 75, 53, 28), pd(85, 50, 61, 64), pd(85, 50, 64, 61),
//		pd(85, 61, 50, 64), pd(85, 61, 64, 50), pd(85, 64, 50, 61), pd(85, 64, 61, 50), pd(87, 20, 54, 79), pd(87, 20, 79, 54), pd(87, 26, 55, 78), pd(87, 26, 78, 55), pd(87, 33, 45, 81), pd(87, 33, 81, 45),
//		pd(87, 38, 48, 79), pd(87, 38, 79, 48), pd(87, 45, 33, 81), pd(87, 45, 81, 33), pd(87, 48, 38, 79), pd(87, 48, 79, 38), pd(87, 54, 20, 79), pd(87, 54, 79, 20), pd(87, 55, 26, 78), pd(87, 55, 78, 26),
//		pd(87, 78, 26, 55), pd(87, 78, 55, 26), pd(87, 79, 20, 54), pd(87, 79, 38, 48), pd(87, 79, 48, 38), pd(87, 79, 54, 20), pd(87, 81, 33, 45), pd(87, 81, 45, 33), pd(88, 21, 43, 84), pd(88, 21, 84, 43),
//		pd(88, 25, 31, 86), pd(88, 25, 86, 31), pd(88, 31, 25, 86), pd(88, 31, 86, 25), pd(88, 32, 46, 82), pd(88, 32, 82, 46), pd(88, 43, 21, 84), pd(88, 43, 84, 21), pd(88, 46, 32, 82), pd(88, 46, 82, 32),
//		pd(88, 82, 32, 46), pd(88, 82, 46, 32), pd(88, 84, 21, 43), pd(88, 84, 43, 21), pd(88, 86, 25, 31), pd(88, 86, 31, 25), pd(89, 17, 40, 86), pd(89, 17, 86, 40), pd(89, 40, 17, 86), pd(89, 40, 86, 17),
//		pd(89, 86, 17, 40), pd(89, 86, 40, 17), pd(90, 10, 60, 80), pd(90, 10, 80, 60), pd(90, 25, 38, 87), pd(90, 25, 87, 38), pd(90, 38, 25, 87), pd(90, 38, 87, 25), pd(90, 45, 60, 75), pd(90, 45, 75, 60),
//		pd(90, 58, 59, 69), pd(90, 58, 69, 59), pd(90, 59, 58, 69), pd(90, 59, 69, 58), pd(90, 60, 10, 80), pd(90, 60, 45, 75), pd(90, 60, 75, 45), pd(90, 60, 80, 10), pd(90, 69, 58, 59), pd(90, 69, 59, 58),
//		pd(90, 75, 45, 60), pd(90, 75, 60, 45), pd(90, 80, 10, 60), pd(90, 80, 60, 10), pd(90, 87, 25, 38), pd(90, 87, 38, 25), pd(92, 6, 72, 74), pd(92, 6, 74, 72), pd(92, 54, 60, 74), pd(92, 54, 74, 60),
//		pd(92, 60, 54, 74), pd(92, 60, 74, 54), pd(92, 72, 6, 74), pd(92, 72, 74, 6), pd(92, 74, 6, 72), pd(92, 74, 54, 60), pd(92, 74, 60, 54), pd(92, 74, 72, 6), pd(93, 32, 54, 85), pd(93, 32, 85, 54),
//		pd(93, 54, 32, 85), pd(93, 54, 85, 32), pd(93, 85, 32, 54), pd(93, 85, 54, 32), pd(95, 15, 50, 90), pd(95, 15, 90, 50), pd(95, 50, 15, 90), pd(95, 50, 90, 15), pd(95, 90, 15, 50), pd(95, 90, 50, 15),
//		pd(96, 19, 53, 90), pd(96, 19, 90, 53), pd(96, 48, 64, 80), pd(96, 48, 80, 64), pd(96, 53, 19, 90), pd(96, 53, 90, 19), pd(96, 64, 48, 80), pd(96, 64, 80, 48), pd(96, 80, 48, 64), pd(96, 80, 64, 48),
//		pd(96, 90, 19, 53), pd(96, 90, 53, 19), pd(97, 45, 69, 79), pd(97, 45, 79, 69), pd(97, 69, 45, 79), pd(97, 69, 79, 45), pd(97, 79, 45, 69), pd(97, 79, 69, 45), pd(99, 11, 66, 88), pd(99, 11, 88, 66),
//		pd(99, 66, 11, 88), pd(99, 66, 88, 11), pd(99, 88, 11, 66), pd(99, 88, 66, 11), pd(100, 16, 68, 88), pd(100, 16, 88, 68), pd(100, 35, 70, 85), pd(100, 35, 85, 70), pd(100, 68, 16, 88), pd(100, 68, 88, 16),
//		pd(100, 70, 35, 85), pd(100, 70, 85, 35), pd(100, 85, 35, 70), pd(100, 85, 70, 35), pd(100, 88, 16, 68), pd(100, 88, 68, 16)
//	};
//	int N;
//	while (cin >> N){
//		int la = -1, lb = -1, lc = -1, ld = -1;
//		for (int i = 0; i <486; i++){
//			if (hash[i].a <= N){
//				//需要排序
//				int* a;
//				a = new int[3];
//				a= mysort(hash[i].b,hash[i].c,hash[i].d);
//				hash[i].b = a[0];
//				hash[i].c = a[1];
//				hash[i].d = a[2];
//				if (la==hash[i].a&&lb==hash[i].b&&lc==hash[i].c&&ld==hash[i].d){
//					//输出过了，就不需要输出了
//					continue;
//				}
//				cout << "Cube = " << hash[i].a << ", Triple = " <<"(";
//				cout << hash[i].b << "," << hash[i].c << "," << hash[i].d << ")" << endl;
//				la = hash[i].a;
//				lb = hash[i].b;
//				lc = hash[i].c;
//				ld = hash[i].d;
//			}
//		}
//	}
//	return 0;
//}


#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
using namespace std;
void work(int n)
{
	int a = n * n * n;
	for (int i = 2;; i++)
	{
		//第一个数字
		int b = i * i * i;
		if (b * 3 > a)
			break;
		for (int j = i;; j++)
		{
			//第二个数字
			int c = j * j * j;
			if (b + c * 2 > a)
				break;
			for (int k = j;; k++)
			{
				//第三个数字
				int d = k * k * k;
				if (b + c + d > a)
					break;
				if (b + c + d == a)
					printf_s("Cube = %d, Triple = (%d,%d,%d)\n", n, i, j, k);
			}
		}
	}
}
int main()
{
	int n;
	scanf_s("%d", &n);
	for (int i = 1; i <= n; i++)
		work(i);
	return 0;
}