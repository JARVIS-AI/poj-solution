/*
  题意：就是给一个字符串，问最少需要添加几个字符
  使得这个字符串是一个回文串
  思路：这个最小长度=字符串的长度-正向字符串与
  反向字符串的最大公共字串的长度
   所以，动态规划  
 */
#include<iostream>
#include<string>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
string str, restr;
/*
int **dp;
int main()
{
	int n;
	while (scanf_s("%d", &n) != EOF){
		cin >> str;
		restr = str;
		reverse(restr.begin(), restr.end());
		dp = new int*[n + 1];
		for (int i = 0; i < n + 1; i++)
			dp[i] = new int[n + 1];

		for (int i = 0; i < n + 1; i++)
		for (int j = 0; j < n + 1; j++)
			dp[i][j] = 0;
		for (int i = 1; i <= str.length(); i++)
		{
			for (int j = 1; j <= str.length(); j++)
			{
				if (str[i - 1] == restr[j - 1])
				{
					dp[i][j] = dp[i - 1][j - 1] + 1;
				}
				else{
					dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);
				}
			}
		}
		cout << str.length() - dp[n][n] << endl;
		for (int i = 0; i < n + 1; i++)
			delete[] dp[i];
		delete[]dp;
	}
	return 0;
}
*/
int main()
{
	int n;
	cin >> n >> str;
	restr = str;
	reverse(restr.begin(), restr.end());
	int dp[2][5001];
	for (int i = 0; i < 5001; i++)
	{
		dp[0][i] = 0;
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (str[i] == restr[j])
			{
				dp[1][j + 1] = dp[0][j] + 1;
			}
			else{
				dp[1][j + 1] = max(dp[1][j], dp[0][j + 1]);
			}
		}
		for (int j = 1; j <= n; j++)
		{
			dp[0][j] = dp[1][j];
		}
	}
	cout << n - dp[1][n] << endl;
	return 0;
}