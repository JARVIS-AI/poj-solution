///*
//  最小生成树算法
//  kruskal算法
//*/
//#include<iostream>
//#include<cstdio>
//#include<string.h>
//#include<algorithm>
//#include<string>
//using namespace std;
//string str[2111];
//int par[2111];
//struct edge
//{
//	int f, t, c;
//}es[3000000];
//void init(int n)
//{
//	for (int i = 0; i < n; i++)
//	{
//		par[i] = i;
//	}
//}
//int findd(int x)
//{
//	while (x != par[x])
//	{
//		x = par[x];
//	}
//	return x;
//}
//void un(int x, int y)
//{
//	par[x] = y;
//}
//bool cmp_c(edge a, edge b)
//{
//	return a.c < b.c;
//}
//int kruskal(int n)
//{
//	int ans = 0;
//	//n is the num of edge
//	for (int i = 0; i < n; i++)
//	{
//		int a = findd(es[i].f);
//		int b = findd(es[i].t);
//		if (a != b)
//		{
//			ans += es[i].c;
//			un(es[i].f, es[i].t);
//		}
//	}
//	return ans;
//}
//int main()
//{
//	int N;
//	while (cin >> N)
//	{
//		if (N== 0) break;
//		int n = 0;
//		for (int i = 0; i < N; i++)
//		{
//			//cin >> str[i];
//			scanf_s("%s", str[i]);
//			for (int j = 0; j < i; j++)
//			{
//				es[n].f = i;
//				es[n].t = j;
//				es[n].c = 0;
//				for (int k = 0; k < str[i].length();k++)
//				if (str[i][k] != str[j][k])
//				{
//					es[n].c++;
//				}
//				n++;
//			}
//		}
//		init(N);
//		sort(es, es + n,cmp_c);
//		cout << "The highest possible quality is 1/" << kruskal(n) << "." << endl;
//	}
//	return 0;
//}



#include"stdio.h"
#include"string.h"
#include"stdlib.h"
#include<algorithm>
using namespace std;
int n;
char str[2011][10];
int set[2011];
struct A
{
	int a, b;
	int len;
}eage[3000000];
int num_eage;
bool cmp_c(A a, A b)
{
	return a.len < b.len;
}
void build(int num)
{
	int i;
	for (i = 0; i<num; i++)	set[i] = i;
}
int find(int k)
{
	while (k != set[k])
	{
		k = set[k];
	}
	return k;
}
void Union(int f1, int f2)
{
	set[f1] = f2;
}
int Kruskal()
{
	int i;
	int ans;
	int count;
	int f1, f2;
	ans = 0;
	count = 1;
	for (i = 0; i<num_eage; i++)
	{
		if (count == n)	break;
		f1 = find(eage[i].a);
		f2 = find(eage[i].b);
		if (f1 == f2)	continue;
		ans += eage[i].len;
		Union(f1, f2);
		count++;
	}
	return ans;
}
int main()
{
	int i, l, j;
	int temp;
	while (scanf("%d", &n), n)
	{
		build(n);
		num_eage = 0;
		for (i = 0; i<n; i++)
		{
			scanf("%s", str[i]);
			for (l = 0; l<i; l++)
			{
				eage[num_eage].a = i;
				eage[num_eage].b = l;
				temp = 0;
				for (j = 0; j<7; j++)	if (str[i][j] != str[l][j])	temp++;
				eage[num_eage++].len = temp;
			}
		}
		sort(eage, eage + num_eage, cmp_c);
		printf("The highest possible quality is 1/%d.\n", Kruskal());
	}
	return 0;
}