/*
 @poj 3036
 题意：蜜蜂每次可以向周围的六个方向爬，那么
 问经过k次移动后，蜜蜂回到原点的方法数量
 DP：
   dp[k][i][j]:代表原点走k步后到达点（i，j）的方法数
   那么：
   dp[k][i][j] = dp[k - 1][i - 1][j - 1] + dp[k - 1][i][j - 1] + dp[k - 1][i + 1][j] +
                 dp[k - 1][i + 1][j + 1] + dp[k - 1][i][j + 1] + dp[k - 1][i - 1][j];
 
   因为可能向反方向运动，但是数组下标不能为负数，所以要
   至少保证起点大于15

*/
#include<iostream>
#include<string.h>
using namespace std;
int main()
{
	int dp[15][100][100];
	memset(dp, 0, sizeof(dp));
	dp[0][20][20] = 1;
	for (int k = 1; k <= 14;k++)
	for (int i = 1; i <= (2 * 14 + 1);i++)
	for (int j = 1; j <= (2 * 14 + 1);j++)
		dp[k][i][j] = dp[k - 1][i - 1][j - 1] + dp[k - 1][i][j - 1] + dp[k - 1][i + 1][j] +
		dp[k - 1][i + 1][j + 1] + dp[k - 1][i][j + 1] + dp[k - 1][i - 1][j];
	int cas,k;
	cin >> cas;
	while (cas--)
	{
		cin >> k;
		cout << dp[k][20][20] << endl;
	}
	return 0;
}
