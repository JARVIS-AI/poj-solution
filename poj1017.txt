/*
  题意：给出一些忽略高度的只看面积的东西，大小从
  1*1....6*6
  给出这些大小的数量，现在只有6*6的箱子来装这些东西
  但是为了赚钱，需要尽可能少的箱子，那么最少的
  箱子数是多少个呢
  思路：一路贪心下去，先装大的，然后再用小的填空白
*/
#include<iostream>
using namespace std;
int box[6];
int main()
{
	//这个数组用来保存当一个箱子里面装入了
	//4 1 2 3个3*3的东西后可以装入2*2的数量
	int leaveToT[4] = { 0, 5, 3, 1 };
	int minBox = 0;
	while (true)
	{
		minBox = 0;
		int s = 0;
		//input
		for (int i = 0; i < 6; i++)
		{
			cin >> box[i];
			s += box[i];
		}
		if (s == 0) break;
		//1、6*6的东西有多少都需要单独的一个箱子
		minBox += box[5];
		//2、5*5的东西也是需要单独一个箱子，剩下
		//的空间只能由1*1的来填
		minBox += box[4];
		//3、4*4的也需要单独
		minBox += box[3];
		//4、3*3的东西每四个可以填满一个整箱子
		minBox += (box[2] + 3)/4;

		//在上面的东西都放进去箱子后，还可以
		//填入的大小为2*2的东西的量
		int leave2 = 5 * box[3] + leaveToT[box[2] % 4];
		if (box[1] > leave2)
		{
			//说明这些2*2的填进去后还剩下2*2的东西
			//那么就要将剩下的2*2的东西重新开辟一个
			//箱子了，没9个2*2的箱子可以填满一个箱子
			minBox += (box[1] - leave2 + 8) / 9;
		}
		//在上面的都填完后，就需要求可以再填进去多少个大小
		//位1*1的东西啦，如果不够的话，就要新的箱子啊
		//每36个1*1的东西可以填满一个箱子
		int leave1 = 36 * minBox - 36 * box[5] -
			25 * box[4] - 16 * box[3] - 9 * box[2]
			- 4 * box[1];
		if (leave1 < box[0])
		{
			minBox += (box[0] - leave1 + 35) / 36;
		}
		cout << minBox << endl;
	}
	return 0;
}